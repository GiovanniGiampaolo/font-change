{"version":3,"sources":["Theme.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["theme","font","createMuiTheme","typography","fontFamily","palette","primary","main","secondary","overrides","MuiButton","root","margin","App","React","useState","setFont","prevMode","setPrevMode","className","Card","style","padding","display","flexDirection","alignItems","justifyContent","ThemeProvider","Typography","variant","Button","paddingTop","color","onClick","FormControl","width","Select","fullWidth","value","onChange","event","target","MenuItem","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8RAEaA,EAAQ,eAACC,EAAD,uDAAgB,aAAhB,OAAiCC,YAAe,CACjEC,WAAY,CACRC,WAAYH,GAEhBI,QAAS,CACLC,QAAS,CACLC,KAAM,WAEVC,UAAW,CACPD,KAAM,YAGdE,UAAW,CACPC,UAAW,CACPC,KAAM,CACFC,OAAQ,S,QC6CTC,MAxDf,WAAgB,IAAD,EAEaC,IAAMC,SAAS,IAF5B,mBAEJd,EAFI,KAEEe,EAFF,OAGqBF,IAAMC,UAAS,GAHpC,mBAGJE,EAHI,KAGMC,EAHN,KASX,OACI,qBAAKC,UAAU,aAAf,SACI,cAACC,EAAA,EAAD,CAAMC,MAAO,CACTC,QAAS,GACTC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UALpB,SAOMT,EAyBE,eAACU,EAAA,EAAD,CAAe3B,MAAOA,EAAMC,GAA5B,UACI,eAAC2B,EAAA,EAAD,CAAYC,QAAS,QAArB,qCAC6B5B,KAE7B,cAAC6B,EAAA,EAAD,CAAQD,QAAS,YACTR,MAAO,CAACU,WAAY,IAAKC,MAAO,UAChCC,QAAS,kBAAMf,GAAY,IAFnC,wBA5BJ,eAACS,EAAA,EAAD,CAAe3B,MAAOA,IAAtB,UACI,cAAC4B,EAAA,EAAD,CAAYI,MAAO,UACPH,QAAS,KADrB,6CAIA,eAACK,EAAA,EAAD,CAAab,MAAO,CAACc,MAAO,KAA5B,UACI,eAACC,EAAA,EAAD,CACIC,WAAS,EACTC,MAAOrC,EACPsC,SAvBP,SAACC,GAClBxB,EAAQwB,EAAMC,OAAOH,QAmBD,UAKI,cAACI,EAAA,EAAD,CAAUJ,MAAO,YAAjB,SAA8B,cAACV,EAAA,EAAD,CAC1BP,MAAO,CAACjB,WAAY,aADM,qBAE9B,cAACsC,EAAA,EAAD,CAAUJ,MAAO,SAAjB,SAA2B,cAACV,EAAA,EAAD,CACvBP,MAAO,CAACjB,WAAY,UADG,sBAE3B,cAACsC,EAAA,EAAD,CAAUJ,MAAO,WAAjB,SAA6B,cAACV,EAAA,EAAD,CACzBP,MAAO,CAACjB,WAAY,YADK,2BAKjC,cAAC0B,EAAA,EAAD,CAAQD,QAAS,YAAaR,MAAO,CAACU,WAAY,IAAKC,MAAO,YACtDC,QAAS,kBAAMf,GAAY,IADnC,gCCjCRyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACQ,cAAC,EAAD,MAERC,SAASC,eAAe,SFyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.4fcfbeb7.chunk.js","sourcesContent":["import {createMuiTheme} from '@material-ui/core/styles'\r\n\r\nexport const theme = (font: string = 'sans-serif') => createMuiTheme({\r\n    typography: {\r\n        fontFamily: font\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: '#5e35b1'\r\n        },\r\n        secondary: {\r\n            main: '#bc3131'\r\n        }\r\n    },\r\n    overrides: {\r\n        MuiButton: {\r\n            root: {\r\n                margin: 15\r\n            }\r\n        }\r\n    }\r\n})\r\n","import React from 'react'\nimport './App.css'\nimport {Button, Card, FormControl, MenuItem, Select, Typography} from '@material-ui/core'\nimport {theme} from './Theme'\nimport {ThemeProvider} from '@material-ui/core/styles'\n\nfunction App() {\n\n    const [font, setFont] = React.useState('')\n    const [prevMode, setPrevMode] = React.useState(false)\n\n    const handleChange = (event: any) => {\n        setFont(event.target.value)\n    }\n\n    return (\n        <div className=\"App-header\">\n            <Card style={{\n                padding: 40,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center'\n            }}>\n                {!prevMode ?\n                    <ThemeProvider theme={theme()}>\n                        <Typography color={'primary'}\n                                    variant={'h5'}\n                        >Seleziona il tuo font preferito</Typography>\n\n                        <FormControl style={{width: 300}}>\n                            <Select\n                                fullWidth\n                                value={font}\n                                onChange={handleChange}\n                            >\n                                <MenuItem value={'Russo One'}><Typography\n                                    style={{fontFamily: 'Russo One'}}>Russo</Typography></MenuItem>\n                                <MenuItem value={'Langar'}><Typography\n                                    style={{fontFamily: 'Langar'}}>Langar</Typography></MenuItem>\n                                <MenuItem value={'Pacifico'}><Typography\n                                    style={{fontFamily: 'Pacifico'}}>Pacifico</Typography></MenuItem>\n\n                            </Select>\n\n                            <Button variant={'contained'} style={{paddingTop: 10}} color={'secondary'}\n                                    onClick={() => setPrevMode(true)}>Preview</Button>\n                        </FormControl>\n                    </ThemeProvider> :\n                    <ThemeProvider theme={theme(font)}>\n                        <Typography variant={'body1'}>\n                            Hai selezionato il font {font}\n                        </Typography>\n                        <Button variant={'contained'}\n                                style={{paddingTop: 10}} color={'primary'}\n                                onClick={() => setPrevMode(false)}>Go back</Button>\n                    </ThemeProvider>}\n            </Card>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n    <React.StrictMode>\n            <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}